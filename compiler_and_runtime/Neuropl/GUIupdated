import cv2
import numpy as np
import time
import math
import functools

class GUI:
    ''' Instance variables for displaying tabs & GUI '''
    firstframe = False
    fps = 30
    switched = False
    screen_width, screen_height = 1920, 1080
    tab_width = None
    tab_height = 50
    tab_positions = None
    tab_active = [False] * 3
    currtab = 0
    image = np.zeros((screen_height, screen_width, 3), dtype=np.uint8)
    process_time = "0.01 ms"

    # Array of strings that represent the tab titles drawn
    textarr = ["Falling Detection","Pose Detection","Object Detection"]
    Descriptionpos = [(2*((screen_width-100-20) // 3),20+tab_height+100),(screen_width-100,screen_height-100)]
    video_box_x = 80
    video_box_y = 20+tab_height+50
    video_box_width = (Descriptionpos[0][0]-20)-150-(1030-900)
    video_box_height = screen_height-180
    mousex, mousey = 0, 0
    offset = 7

    # Instance variables for Fall Detection model
    text_image = np.zeros_like(image, dtype=np.uint8)
    framefell = False
    fade_in_speed = 0.03
    alpha = 0
    alpha2 = 0
    queue = []
    
    # Instance variables for OpenPose model
    LINE_POINTS = [[0, 1], [1, 2], [2, 3], [3, 4], [1, 5], [5, 6], [6, 7], [1, 8], [8, 9], [9, 10], [1, 11], [11, 12], [12, 13], [0, 14], [0, 15], [14, 16], [15, 17]]
    COLOR_HEAD = (180, 0, 0, 255)
    COLOR_BODY = (180, 255, 255, 0)
    COLOR_FOOT = (180, 0, 255, 0)
    COLOR_LINE = (180, 0x88, 0x88, 0x88)
    COLOR_HEAD = COLOR_HEAD[::-1]
    COLOR_BODY = COLOR_BODY[::-1]
    COLOR_FOOT = COLOR_FOOT[::-1]
    COLOR_LINE = COLOR_LINE[::-1]
    POINT_COLORS = [
    COLOR_HEAD,  # 0. nose
    COLOR_BODY,  # 1. neck
    COLOR_BODY,  # 2. R shoulder
    COLOR_BODY,  # 3. R elbow
    COLOR_BODY,  # 4. R wrist
    COLOR_BODY,  # 5. L shoulder
    COLOR_BODY,  # 6. R elbow
    COLOR_BODY,  # 7. R wrist
    COLOR_FOOT,  # 8. R hip
    COLOR_FOOT,  # 9. R knee
    COLOR_FOOT,  # 10. R ankle
    COLOR_FOOT,  # 11. L hip
    COLOR_FOOT,  # 12. L knee
    COLOR_FOOT,  # 13. L ankle
    COLOR_HEAD,  # 14. R eye
    COLOR_HEAD,  # 15. L eye
    COLOR_HEAD,  # 16. R ear
    COLOR_HEAD  # 17. L ear
    #18. background
    ]
    faceIndex = ["0", "14", "15", "16", "17"]
    OUTPUT_RATIO = 0.008926701731979847
    OUTPUT_BIAS = 126
    threshold = 0.2/OUTPUT_RATIO+OUTPUT_BIAS
    body_parts = [
    "nose",
    "neck",
    "R shoulder",
    "R elbow",
    "R wrist",
    "L shoulder",
    "R elbow",
    "R wrist",
    "R hip",
    "R knee",
    "R ankle",
    "L hip",
    "L knee",
    "L ankle",
    "R eye",
    "L eye",
    "R ear",
    "L ear",
    "background"
    ]   

    # Instance variables for Object Detection model
    _box_prior = [

    ]
    _box_prior = np.array(_box_prior,dtype = np.float64)
    CLASS_NUM = 21
    RESULT_NUM = 1917
    X_SCALE = 10
    Y_SCALE = 10
    W_SCALE = 5
    H_SCALE = 5
    IMG_DIMENSION = 300
    MIN_CONFIDENCE = np.float64(0.5)
    IOU_THRESHOLD = 0.6
    TOP_N_INCLASS = 2
    ALL_RESULT_SIZE = TOP_N_INCLASS*CLASS_NUM
    DEQUANT_BBOX_MEAN = 173
    DEQUANT_BBOX_STEP = 0.064610
    DEQUANT_CLASS_MEAN = 159
    DEQUANT_CLASS_STEP = 0.141151
    TOP_N_RESULT = 2
    labels = ["???",
    "aeroplane",
    "bicycle",
    "bird",
    "boat",
    "bottle",
    "bus",
    "car",
    "cat",
    "chair",
    "cow",
    "diningtable",
    "dog",
    "horse",
    "motorbike",
    "person",
    "pottedplant",
    "sheep",
    "sofa",
    "train",
    "tvmonitor"]
    bbox_t = (-1,-1,-1,-1)
    info_t = [bbox_t, -1,-1,-1,-1] # bbox, class_id, confidence, class_score, invalid 
    classbox_t = [-1,-1,-1,-1] # box_id, class_id, confidence, invalid 
    data = [info_t]*RESULT_NUM
    classboxlist = [classbox_t]*RESULT_NUM
    classresultlist = [-1]*ALL_RESULT_SIZE
    
    def __init__(self):
        # Create a named window with fullscreen flag
        cv2.namedWindow("My Window", cv2.WINDOW_NORMAL)
        cv2.setWindowProperty("My Window", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

        # Set top half of image to white and bottom half to beige
        self.image[:self.screen_height//2, :] = (255, 255, 255)
        self.image[self.screen_height//2:, :] = (211,222,224) 

        # Draw tabs and GUI boxes
        # 164,158,132 = dark blue
        # 236,234,225 = light blue
        self.tab_width = (self.screen_width-100-120) // 3
        self.tab_positions = [(50+i * (self.tab_width)+i*20, 20) for i in range(3)]
        self.draw_tabs()
        self.rounded_rectangle(self.image, self.tab_positions[0], (self.tab_positions[0][0] + self.tab_width, self.tab_positions[0][1] + self.tab_height), (0, 0, 0), 5, True, (164,158,132)) 
        self.tab_text(self.textarr)
        cv2.setMouseCallback("My Window", self.mouse_callback)
        cv2.rectangle(self.image, (self.video_box_x,self.video_box_y),(self.video_box_x+self.video_box_width,self.video_box_y+self.video_box_height),(0,0,0),2)
        
    # Displays model descriptions and board inference time
    def description(self):
        cv2.rectangle(self.image,(self.video_box_x-70,self.video_box_y-45),(self.Descriptionpos[1][0]+70,self.Descriptionpos[1][1]+80),(255,255,255),-1)
        self.image[self.screen_height//2:, :] = (211,222,224)
        self.rounded_rectangle(self.image, (self.Descriptionpos[0][0]+self.offset,self.Descriptionpos[0][1]), (self.Descriptionpos[1][0]+self.offset,self.Descriptionpos[1][1]+self.offset), (0,0,0),5,True,(128,128,128))
        self.rounded_rectangle(self.image, self.Descriptionpos[0], self.Descriptionpos[1], (0,0,0),5,True,(236,234,225))
        if self.currtab == 0:
            cv2.putText(self.image,"Fall Detection:",(self.Descriptionpos[0][0]+20,20+self.tab_height+100+50),cv2.FONT_HERSHEY_SIMPLEX,1,(0,0,0),2)
            cv2.putText(self.image,"By the power of computer vision, a person may",(self.Descriptionpos[0][0]+20,20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "transmit SOS signals to the rescue task forces",(self.Descriptionpos[0][0]+20,30+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "during a fall before he or she hits the ground or",(self.Descriptionpos[0][0]+20,60+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "crushes any communication equipments.",(self.Descriptionpos[0][0]+20,90+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "To detect a fall, two model are developed. The first",(self.Descriptionpos[0][0]+20,120+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "model extracts features out of each video frame",(self.Descriptionpos[0][0]+20,150+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "to determine the degree to which that frame is",(self.Descriptionpos[0][0]+20,180+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "moving or not. The second model then takes in a",(self.Descriptionpos[0][0]+20,210+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "sequence of outputs from the first model and",(self.Descriptionpos[0][0]+20,240+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "determines if falling has occurred.",(self.Descriptionpos[0][0]+20,270+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            
        elif self.currtab == 1:
            cv2.putText(self.image,"OpenPose:",(self.Descriptionpos[0][0]+20,20+self.tab_height+100+50),cv2.FONT_HERSHEY_SIMPLEX,1,(0,0,0),2)
            cv2.putText(self.image, "This OpenPose model can identify 10 spots (nose,",(self.Descriptionpos[0][0]+20,20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "neck, shoulders, elbows, wrist, hip, knee, ankle, eye,",(self.Descriptionpos[0][0]+20,30+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "ear) on both the left and right sides of the body.",(self.Descriptionpos[0][0]+20,60+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "The points are divided into the head, body, and foot",(self.Descriptionpos[0][0]+20,90+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "areas. Each of these 3 areas has a corresponding",(self.Descriptionpos[0][0]+20,120+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "color that all points within are drawn with. Points on ",(self.Descriptionpos[0][0]+20,150+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "the head are drawn with blue, points on the body",(self.Descriptionpos[0][0]+20,180+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "with yellow, and points on the foot with green.",(self.Descriptionpos[0][0]+20,210+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "Red lines connect certain points together to form a",(self.Descriptionpos[0][0]+20,240+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "pose.",(self.Descriptionpos[0][0]+20,270+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            
        else:
            cv2.putText(self.image,"Object Detection:",(self.Descriptionpos[0][0]+20,20+self.tab_height+100+50),cv2.FONT_HERSHEY_SIMPLEX,1,(0,0,0),2)
            cv2.putText(self.image, "This Object Detection model related to image",(self.Descriptionpos[0][0]+20,20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "processing deals with detecting instances of",(self.Descriptionpos[0][0]+20,30+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "semantic objects of a certain class in digital images",(self.Descriptionpos[0][0]+20,60+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "and videos. It uses a two-stage object detection",(self.Descriptionpos[0][0]+20,90+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "model that first determines the region of interest",(self.Descriptionpos[0][0]+20,120+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "before performing the detection on that region.",(self.Descriptionpos[0][0]+20,150+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "The model can detect up to 20 different items",(self.Descriptionpos[0][0]+20,180+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "and up to 2 of each within a single frame.",(self.Descriptionpos[0][0]+20,210+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "Some items include peope, cars, chairs, dogs,",(self.Descriptionpos[0][0]+20,240+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "bottles, and more. A red bounding box is drawn",(self.Descriptionpos[0][0]+20,270+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "around each identified item with a corresponding",(self.Descriptionpos[0][0]+20,300+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            cv2.putText(self.image, "confidence.",(self.Descriptionpos[0][0]+20,330+20+self.tab_height+100+50+50),cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,0),1)
            
        cv2.putText(self.image,"Inference Time: "+self.process_time,(self.Descriptionpos[0][0]+20,20+self.tab_height+100+self.Descriptionpos[1][1]//2),cv2.FONT_HERSHEY_SIMPLEX,1,(0,0,0),2)

    # Draws rounded rectangle
    def rounded_rectangle(self, src, topLeft, bottomRight, lineColor, cornerRadius, fill, fillcolor):
        p1 = topLeft
        p2 = (bottomRight[0], topLeft[1])
        p3 = bottomRight
        p4 = (topLeft[0], bottomRight[1])

        if fill == True:
            cv2.rectangle(src, (p1[0]+cornerRadius, p1[1]), (p3[0]-cornerRadius, p3[1]), fillcolor, -1)
            cv2.rectangle(src, (p1[0], p1[1]+cornerRadius), (p3[0], p3[1]-cornerRadius), fillcolor, -1)
            cv2.ellipse(src, (p1[0] + cornerRadius, p1[1] + cornerRadius), (cornerRadius, cornerRadius), 180.0, 0, 90, fillcolor, -1)
            cv2.ellipse(src, (p2[0] - cornerRadius, p2[1] + cornerRadius), (cornerRadius, cornerRadius), 270.0, 0, 90, fillcolor, -1)
            cv2.ellipse(src, (p3[0] - cornerRadius, p3[1] - cornerRadius), (cornerRadius, cornerRadius), 0.0, 0, 90, fillcolor, -1)
            cv2.ellipse(src, (p4[0] + cornerRadius, p4[1] - cornerRadius), (cornerRadius, cornerRadius), 90.0, 0, 90, fillcolor, -1)
        
        cv2.rectangle(src, (p1[0]+cornerRadius, p1[1]), (p3[0]-cornerRadius, p3[1]), fillcolor, -1)
        cv2.rectangle(src, (p1[0], p1[1]+cornerRadius), (p3[0], p3[1]-cornerRadius), fillcolor, -1)
        
        cv2.ellipse(src, (p1[0] + cornerRadius, p1[1] + cornerRadius), (cornerRadius, cornerRadius), 180.0, 0, 90, fillcolor, -1)
        cv2.ellipse(src, (p2[0] - cornerRadius, p2[1] + cornerRadius), (cornerRadius, cornerRadius), 270.0, 0, 90, fillcolor, -1)
        cv2.ellipse(src, (p3[0] - cornerRadius, p3[1] - cornerRadius), (cornerRadius, cornerRadius), 0.0, 0, 90, fillcolor, -1)
        cv2.ellipse(src, (p4[0] + cornerRadius, p4[1] - cornerRadius), (cornerRadius, cornerRadius), 90.0, 0, 90, fillcolor, -1)

    # Draws tabs and fills it in with corresponding color
    def draw_tabs(self):
        for i, position in enumerate(self.tab_positions):
            color = (0, 255, 0) if self.tab_active[i] else (0, 0, 255)
            self.rounded_rectangle(self.image, (position[0], 20), (position[0]+self.tab_width, position[1]+self.tab_height), (0,0,0), 5, False, (236,234,225))

    # Writes text in tab 
    def tab_text(self, text):
        font = cv2.FONT_HERSHEY_SIMPLEX
        scale = 0.7
        color = (0, 0, 0) 
        thickness = 2
        for i, position in enumerate(self.tab_positions):
            cv2.putText(self.image, text[i], (position[0]+10, + position[1]+self.tab_height-15), font, scale, color, thickness)

    # Method is called whenever a mouse event is detected
    def mouse_callback(self, event, x, y, flags, param):
        if event == cv2.EVENT_LBUTTONDOWN:
            self.mousex, self.mousey = x, y
            for i, position in enumerate(self.tab_positions):
                if position[0] <= self.mousex <= position[0] + self.tab_width and position[1] <= self.mousey <= position[1] + self.tab_height:
                    self.rounded_rectangle(self.image, position, (position[0] + self.tab_width, position[1] + self.tab_height), (0, 0, 0), 5, True, (164,158,132))  # Active tab fill color
                    self.tab_text(self.textarr)
                    if i != self.currtab:
                        self.currtab = i
                        cv2.rectangle(self.image, (self.video_box_x,self.video_box_y),(self.video_box_x+self.video_box_width,self.video_box_y+self.video_box_height),(0,0,0),2)
                        self.alpha, self.alpha2 = 0, 0
                        self.switched = True
                else:
                    self.rounded_rectangle(self.image, position, (position[0] + self.tab_width, position[1] + self.tab_height), (0, 0, 0), 5, True,(236,234,225))
                    self.tab_text(self.textarr)
            cv2.imshow("My Window", self.image)
        return -1
    
    # If 'q' is pressed, exit GUI. If 's' is pressed, take and save a screenshot  
    def check_key(self):
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            return True
        elif key == ord('s'):
            timestamp = int(time.time())  
            screenshot_filename = f"screenshot_{timestamp}.png"  
            cv2.imwrite(screenshot_filename, self.image)
        return False

    def cropFrameToSquare(self, frame):
        h, w, _ = frame.shape
        target_len = min(h,w)
        start_x, start_y = (w - target_len)//2, (h - target_len)//2
        return frame[start_y:start_y+target_len, start_x:start_x+target_len, :]


    # Performs post-processing on one of the 3 models and draws the frame and the model's result onto the GUI
    def draw_frame(self, frame, result, performance, fps):
        # Calculates inference time and resizes current frame to fit in a box witin the GUI
        self.process_time = str(round(performance*1000,2))+" ms"
        if fps != 0:
            self.fps = str(int(1/fps))

        # Crop frame to a square and resize it to fit the video box in the UI. Then write the model description.
        frame = self.cropFrameToSquare(frame)
        resized_frame = cv2.resize(frame, (self.video_box_width, self.video_box_height))  
        self.description()

        # Fall Detection Post-processing
        if self.currtab == 0:
            # if self.firstframe == True:
            #     self.queue = []
            #     self.firstframe = False
            # self.queue.append(result)
            # if len(self.queue) > 2:
            #     self.queue.pop(0)
            # if len(self.queue) == 2 and False not in self.queue:

            # Print the "Falling" text to the screen if the result is True
            if result == True:
                # Add a slightly dark overlay on the video box region
                overlay = np.full(resized_frame.shape, (0, 0, 0), dtype=np.uint8)
                overlay = cv2.addWeighted(resized_frame, 1 - 0.6, overlay, 0.6, 0)
                self.image[self.video_box_y:self.video_box_y + self.video_box_height, self.video_box_x:self.video_box_x + self.video_box_width] = overlay

                # Add the "Falling" text
                cv2.putText(self.image, "Falling", (self.video_box_x+self.video_box_width//2-120,self.video_box_y+self.video_box_height//2),cv2.FONT_HERSHEY_DUPLEX,3,(255,255,255),6)

            # If results is False, just display the current frame
            else:
                self.image[self.video_box_y:self.video_box_y + self.video_box_height, self.video_box_x:self.video_box_x + self.video_box_width] = resized_frame

        # OpenPose post-processing
        elif self.currtab == 1:
            # Initialize arrays and constants 
            rows = 46
            cols = 46
            length = 57
            array_2d = np.zeros((1, rows, cols, length))
            array_2d[0] = np.reshape(result,(rows, cols, length))
            reshaped_array = np.reshape(array_2d, (46*46, 57))
            indexlst = np.argmax(reshaped_array, axis=1)
            indexlst = np.reshape(indexlst, (46, 46))

            # For each key body part indexed 0 to 18, find and store the point that corresponds to that index with maximum confidence. The point must also exceed the threshold. 
            Points = []
            for a in range(0,18):
                coordinates = (-1,-1)
                maxconfidence = -1
                for b in range(0,46):
                    for c in range(0,46):
                        if indexlst[b][c] == a:
                            if array_2d[0][b][c][a] > maxconfidence and array_2d[0][b][c][a] >= self.threshold:
                                maxconfidence = array_2d[0][b][c][a]
                                coordinates = (c,b)
                Points.append(coordinates)
            
            # Resize all the (x,y) coordinates of all points stored to that of the video box in the UI. If the coordinate is null, or (-1,-1), there is no need to resize it. 
            resized_Pts = []
            for pt in Points:
                if pt[0] != -1:
                    newx = (int)(pt[0]/46*self.video_box_width)
                    newy = (int)(pt[1]/46*self.video_box_width)
                    pt = (newx,newy) 
                    resized_Pts.append(pt)
                else:
                    resized_Pts.append((-1,-1))

            # Draw the current frame onto the screen before drawing the pose.
            self.image[self.video_box_y:self.video_box_y + self.video_box_height, self.video_box_x:self.video_box_x + self.video_box_width] = resized_frame

            # For each body part, draw a dot on its coordiantes if the point is not null, or not (-1,-1).
            for i in range(len(resized_Pts)):
                if resized_Pts[i][0] != -1:
                    # If the index of the point corresponds to that of a part on the face, draw a dot with COLOR_HEAD, or blue. Else, use the color that corresponds with that body part in POINT_COLORS.
                    if str(i) in self.faceIndex:
                        cv2.circle(self.image,(self.video_box_x+resized_Pts[i][0],self.video_box_y+resized_Pts[i][1]),5,self.POINT_COLORS[0],4)
                    else:
                        cv2.circle(self.image,(self.video_box_x+resized_Pts[i][0],self.video_box_y+resized_Pts[i][1]),5,self.POINT_COLORS[i],4)
            
            # Draw red lines connecting the body parts that correspond to the indices of each array in LINE_POINTS, creating a graph. 
            for linept in self.LINE_POINTS:
                startIndex = linept[0]
                endIndex = linept[1]
                startPt = resized_Pts[startIndex]
                endPt = resized_Pts[endIndex]
                if(startPt[0] != -1 and endPt[0] != -1):
                    cv2.line(self.image, (self.video_box_x+startPt[0],self.video_box_y+startPt[1]),(self.video_box_x+endPt[0],self.video_box_y+endPt[1]),(0,0,255),3)
            
        # Object Detection post-processing.
        elif self.currtab == 2:
            # Dequantize both results, which correspond to the class and box info, respectively. For the class information (result[0]), also perform a sigmoid activation.
            result[0] = 1/(1+np.exp(-((result[0].astype(np.float64)-self.DEQUANT_CLASS_MEAN)*self.DEQUANT_CLASS_STEP)))
            result[1] = (result[1].astype(np.float64)-self.DEQUANT_BBOX_MEAN)*self.DEQUANT_BBOX_STEP

            # Resize the class information to (1917, 21) to classify the data into 21 points. Initilize a boxdata with a list of tuples, which stores bouding box information. Coordinates correspond to the boxes top left corner:  (x, y, width, height)
            dequant_class = result[0]
            dequant_class = np.array(np.reshape(result[0], (1917, 21)))
            dequant_box = np.array(result[1])
            boxdata = [(-1,-1,-1,-1)]*1917
            
            # Initilize a classboxlist that stores information about each of 1917 data points for each of the 21 classes as follows:
            # [1st class (aeroplane): [ (box_id, class_id,confidence, invalid)], [1st info],... [1917th info]]
            #  2nd class (bicycle):                                                                          
            #  ... to 21st class                                                                             ]
            classboxlist = [[(-1, -1, -1., False) for _ in range(1917)] for _ in range(21)] 
            

            classresultlist = ([-1]*self.ALL_RESULT_SIZE)
            invalidindexes= [False] * 1917 # 0 = not invalid, -1 = invalid for &data

            for i in range(0,1917):
                #startbox = time.time()
                #boxdata.append((self.getbox(dequant_box[0][i], i))) 

                boxdata[i] = self.getbox(dequant_box[i*4:i*4+4], i)
                #dequant_box = dequant_box[4:]
                #classdata.append(self.getconfidence(dequant_class[0][i]))
                # endbox = time.time()
                # print("GETBOX/CONFIDENCE 1 TIME")
                # print(endbox - startbox)
                # print()
                
                # end = time.time()
                # print("SIGMOID TIME ")
                # print(end - start)
                # print()
                #start = time.time()
                # classboxlist[j][i] = [[i, j, dequant_class[i*21+j], dequant_class[i*21+j] < self.MIN_CONFIDENCE] for j in range(1, self.CLASS_NUM)]
                

                #confidences = dequant_class[i*21+1:i*21+21]
                confidences = dequant_class[i][1:21]
                #start = time.time()
                # for j in range(1, self.CLASS_NUM):
                #     confidence = dequant_class[i*21+j]
                #     if confidence < self.MIN_CONFIDENCE:
                #         classboxlist[j][i] = [i,j,-1,True]
                #     else:    
                #         classboxlist[j][i] = [i,j,confidence,False] 
                # for j, x in enumerate(classes):
                #     classboxlist[j][i] = (i, j, x, x < 0.5)

                cnt = 1
                for x in confidences:
                    if x < self.MIN_CONFIDENCE:
                        classboxlist[cnt][i] = (i,cnt,-1,True)
                    else:
                        classboxlist[cnt][i] = (i,cnt,x,False)
                    cnt+=1

                # time.sleep(10)

                # for j in range(1, self.CLASS_NUM):
                #     confidence = dequant_class[i*21+j]
                #     if confidence < self.MIN_CONFIDENCE:
                #         classboxlist[j][i] = [i,j,-1,True]
                #     else:    
                #         classboxlist[j][i] = [i,j,confidence,False] 

                    #classboxlist[j][i] = info
                # end = time.time()
                # print("SIGMOID REAL TIME ")
                # print(end - start)
                # print()
                # #start = time.time()
                clip_window_output = self.clip_window(boxdata[i])
                boxdata[i] = clip_window_output[0]
                invalidindexes[i] = clip_window_output[1]
                # if invalidindexes[i] == True:
                #     time.sleep(10)
                # end = time.time()
                # print("GETBOX/CONFIDENCE 2 TIME")
                # print(end - start)
                # print()
            # inva = []
            # for i in range(0,len(invalidindexes)):
            #     if invalidindexes[i]:
            #         inva.append(i)
            # print(inva)
            # if len(inva) != 0:
            #     time.sleep(10)
            end1 = time.time()
            print("GET INFO TIME")
            print(end1 - start1)
            print()
            #startNMS = time.time()

            for k in range(1, self.CLASS_NUM):
                current_item = 0
                classboxlist[k] = sorted(classboxlist[k], key=lambda x: -x[2])
                #classboxlist[k] = sorted(classboxlist[k], key=functools.cmp_to_key(self.classbox_compare))
                # cnt = 0
                # for i in range(0,21):
                #     for j in range(0,1917):
                #         if classboxlist[i][j] != -1:
                #             cnt+=1
                #print(cnt)

                # if classboxlist[k][0][3] == True:
                #     continue
                
                if classboxlist[k][0][3]:
                    #classboxlist[k][0][3] = True
                    continue
                classresultlist[k * self.TOP_N_INCLASS + 0] = classboxlist[k][current_item]
                for l in range(0,self.TOP_N_INCLASS):#0->2
                    if current_item >= self.RESULT_NUM:
                        break
                    # Perform non-maximum suppression and get the next item to be output
                    next_item = self.NMS_byclass(classboxlist[k],invalidindexes,k,current_item,boxdata)
                    #next_item = NMS_output[0]
                    #invalids = NMS_output[1]
                    # for z in range(0,len(invalids)):
                    #     oldtup = classboxlist[k][invalids[z]]
                    #     newtup = (oldtup[0],oldtup[1],oldtup[2],True)
                    #     classboxlist[k][invalids[z]] = newtup
                    classresultlist[k * self.TOP_N_INCLASS + l] = classboxlist[k][current_item]
                    
                    # No more valid output
                    if next_item < 0:
                        break

                    current_item = next_item
            # endNMS = time.time()
            # print("NMS TIME")
            # print(endNMS - startNMS)
            # print()

            #start = time.time()
            rescnt = 0
            for i in range(self.ALL_RESULT_SIZE):
                if classresultlist[i] != -1:
                    classresultlist[rescnt] = classresultlist[i]
                    rescnt += 1

            #print("Detections: "+str(rescnt))
            classresultlist = classresultlist[:rescnt]
            #print(classresultlist)
            # Sort the classresultlist
            classresultlist = sorted(classresultlist, key=functools.cmp_to_key(self.resultbox_compare), reverse=True)
            outputsize = 0
            if rescnt > self.TOP_N_RESULT:
                outputsize = self.TOP_N_RESULT
            else:
                outputsize = rescnt

            #print("Top "+str(outputsize)+" Results:")
            #[(box_id, class_id, confidence, invalid)]
            self.image[self.video_box_y:self.video_box_y + self.video_box_height, self.video_box_x:self.video_box_x + self.video_box_width] = resized_frame
            for i in range(outputsize):
                pclassbox = classresultlist[i]
                if pclassbox == -1:
                    continue
                current_item = pclassbox[0]
                if pclassbox[3] == False and pclassbox[1] != 20 and invalidindexes[current_item] == False:
                    if current_item < 0 or current_item > self.RESULT_NUM:
                        print("Something wrong")
                    # output msg
                    framedata = []
                    framedata.append((int)(boxdata[current_item][0]*self.video_box_width))
                    framedata.append((int)(boxdata[current_item][1]*self.video_box_width))
                    framedata.append((int)((boxdata[current_item][0]+boxdata[current_item][2])*self.video_box_width))
                    framedata.append((int)((boxdata[current_item][1]+boxdata[current_item][3])*self.video_box_width))
                    cv2.rectangle(self.image,(self.video_box_x+framedata[0],self.video_box_y+framedata[1]),(self.video_box_x+framedata[2],self.video_box_y+framedata[3]),(0,0,255),2)
                    cv2.putText(self.image,str(self.labels[pclassbox[1]])+": "+str(round(pclassbox[2],3)),(self.video_box_x+framedata[0],self.video_box_y+framedata[1]-20),cv2.FONT_HERSHEY_SIMPLEX,1,(0,0,255),2)
                    return_msg = str(self.labels[pclassbox[1]])+" (ID: "+str(pclassbox[1])+"): "+"\nConfidence: "+str(pclassbox[2])+"\nBBOx: "+str(boxdata[current_item][0])+", "+str(boxdata[current_item][1])+", "+str(boxdata[current_item][2])+", "+str(boxdata[current_item][3])
                    print(return_msg)
                
            # end = time.time()
            # print()
            # print("SORT RESULTS + RECTANGLE TIME")
            # print(end - start)
            # print()
        

        
        cv2.imshow("My Window", self.image)
        # window_x = 1000  # Initial x position
        # window_y = 100  # Initial y position
        # cv2.moveWindow("My Window", window_x, window_y)
    
    '''OBJECT DET METHODS'''
    def _get_decoded_box(self,input, region_id, bbox):
        x_center, y_center = 0.0, 0.0
        w, h = 0.0, 0.0
        bbox = [-1,-1,-1,-1]
        prior_x = self._box_prior[1 * self.RESULT_NUM + region_id]
        prior_y = self._box_prior[0 * self.RESULT_NUM + region_id]
        prior_w = self._box_prior[3 * self.RESULT_NUM + region_id]
        prior_h = self._box_prior[2 * self.RESULT_NUM + region_id]

        y_center = input[0] / self.Y_SCALE * prior_h + prior_y
        x_center = input[1] / self.X_SCALE * prior_w + prior_x

        h = math.exp(input[2] / self.H_SCALE) * prior_h
        w = math.exp(input[3] / self.W_SCALE) * prior_w

        self.data[i][0][0] = self.IMG_DIMENSION * (x_center - w / 2)
        self.data[i][0][1]  = self.IMG_DIMENSION * (y_center - h / 2)
        self.data[i][0][2]  = self.IMG_DIMENSION * w
        self.data[i][0][3]  = self.IMG_DIMENSION * h


    def getbox(self,input, region_id):
        #start = time.time()
        x_center, y_center = 0.0, 0.0
        w, h = 0.0, 0.0
        
        prior_x = self._box_prior[1 * self.RESULT_NUM + region_id]
        prior_y = self._box_prior[0 * self.RESULT_NUM + region_id]
        prior_w = self._box_prior[3 * self.RESULT_NUM + region_id]
        prior_h = self._box_prior[2 * self.RESULT_NUM + region_id]
        # print(type(prior_x))
        # time.sleep(10)

        y_center = input[0] / self.Y_SCALE * prior_h + prior_y
        x_center = input[1] / self.X_SCALE * prior_w + prior_x

        h = math.exp(input[2] / self.H_SCALE) * prior_h
        w = math.exp(input[3] / self.W_SCALE) * prior_w
        bbox = ((x_center - w / 2),(y_center - h / 2),w,h)
        # bbox[0] = self.IMG_DIMENSION * (x_center - w / 2)
        # bbox[1] = self.IMG_DIMENSION * (y_center - h / 2)
        # bbox[2] = self.IMG_DIMENSION * w
        # bbox[3] = self.IMG_DIMENSION * h
        # end = time.time()
        # print()
        # print("GETBOX METHOD")
        # print(end-start)
        # print()
        return bbox

    def getconfidence(self,input):
        max_val = -1.0
        adjusted = 0.0
        class_index = 0
        confidence = 0
        # Skip the first catch-all class
        input = input[1:]

        for i in range(0, self.CLASS_NUM-1):
            data = input[i]
            adjusted = 1 / (1 + math.exp(-1*data))

            if adjusted > max_val:
                max_val = adjusted
                class_index = i

        confidence = max_val
        ans = [class_index,confidence]
        
        return ans

    def clip_window(self,data):
        if data is None:
            return -1
    
        wx1 = 0
        wx2 = 300
        wy1 = 0
        wy2 = 300

        bx1 = data[0]
        by1 = data[1]
        bx2 = data[0] + data[2]
        by2 = data[1] + data[3]

        if bx1 < wx1:
            bx1 = wx1
        if bx2 < wx1:
            bx2 = wx1
        if bx1 > wx2:
            bx1 = wx2
        if bx2 > wx2:
            bx2 = wx2
        if by1 < wy1:
            by1 = wy1
        if by2 < wy1:
            by2 = wy1
        if by1 > wy2:
            by1 = wy2
        if by2 > wy2:
            by2 = wy2
        newdata = [-1,-1,-1,-1]
        newdata[0] = bx1
        newdata[1] = by1
        newdata[2] = bx2 - bx1
        newdata[3] = by2 - by1
        invalid = False
        if newdata[2] * newdata[3] < 0.1:
            invalid = True

        return newdata, invalid

    def classbox_compare(self,a, b):
        # if a[3]:
        #     if b[3]:
        #         return 0
        #     else:
        #         return -1
        # if b[3]:
        #     return 1
        return 1 if a[2] < b[2] else -1

    def resultbox_compare(self,a,b):
        x = a
        y = b
        
        if x[3] == -1:
            if y[3] == -1:
                return 0
            else:
                return 1
        
        if y[3] == -1:
            return -1
        
        return 1 if x[2] < y[2] else -1

    def MIN(self,x, y):
        return y if x > y else x

    def MAX(self,x, y):
        return y if x < y else x

    def IS_VALID_RECT(self,bbox):
        return bbox[2] > 0 and bbox[3] > 0

    def RECT_AREA(self,bbox):
        return bbox[2] * bbox[3]

    def get_iou(self,box_a, box_b):
        overlap = [-1,-1,-1,-1]
        overlap[0] = self.MAX(box_a[0], box_b[0])
        overlap[1] = self.MAX(box_a[1], box_b[1])
        overlap[2] = self.MIN(box_a[0] + box_a[2], box_b[0] + box_b[2]) - overlap[0]
        overlap[3] = self.MIN(box_a[1] + box_a[3], box_b[1] + box_b[3]) - overlap[1]

        if not self.IS_VALID_RECT(overlap):
            return 0.0

        return self.RECT_AREA(overlap) / (self.RECT_AREA(box_a) + self.RECT_AREA(box_b) - self.RECT_AREA(overlap))

    def NMS_byclass(self,classboxlist, boxlist, classid, current_id, boxes):
        if classboxlist[current_id][1] != classid:
            return -1
        
        curid = current_id
        next_item = -1
        
        for i in range(curid + 1, self.RESULT_NUM):
            if classboxlist[i][3]:
                continue
            
            if classboxlist[i][2] < self.MIN_CONFIDENCE:
                #indexes.append(i)
                #classboxlist[i][3] = True
                continue
            
            boxid = classboxlist[i][0]
            curboxid = classboxlist[curid][0]
            #if boxlist[boxid][3]:
            if boxlist[boxid] == True:
                #indexes.append(i)
                #classboxlist[i][3] = True
                continue
            
            if classboxlist[i][1] == classid and self.get_iou(boxes[boxid], boxes[curboxid]) > self.IOU_THRESHOLD:
                #indexes.append(i)
                #classboxlist[i][3] = True
                continue
            
            if next_item < 0:
                next_item = i
        
        return next_item#, indexes